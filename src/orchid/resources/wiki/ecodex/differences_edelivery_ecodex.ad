The differences between e-Delivery and e-Codex
==============================================

////
Big ol' comment

sittin' right 'tween this here title 'n header metadata
////
:description: A text about the differences between e-Delivery and e-Codex
:library: Asciidoctor
:stylesheet: asciidoc.css
:imagesdir: ../../../assets/media/images/



To be disappointing at the first written line. There are no differences! E-delivery is a part of e-Codex. E-Codex is
using e-Delivery to transport the e-Codex messages between two access points.


== The features of e-Delivery

 * Utilizes AS4 messaging standard
 * Ensures message transport between two access-points
 * Validation and compression of the user message
 * Signing of the compressed message
 * Encryption of the signed compressed message
 * validation of the origin user message
 * sending back of acknowledgments


.Excerpt of the e-Delivery Flyer
image::e_delivery_flyer.png[]
https://ec.europa.eu/cefdigital/wiki/download/attachments/82773424/20180912_eDelivery_Flyer.pdf?version=1&modificationDate=1537358787680&api=v2

== The requirements of e-Codex

E-Delivery does a lot of things and is put to good use in a lot of projects. But for e-Codex there have been additional
requirements.

 * Proof of the location of the document
 * Creating trust between different systems

== Proof of the location of the document

Within the e-Codex usescases there is always a urgent need to determine the current location of a sent
document. Though the AS4 acknowledge tells us when the message has reached the other access-point, but for e-Codex
there is also the requirement to tell exactly when the message has reached the inbox of the final recipient or
for some usecaes when the final recipient has read/become aware of the message.

For this purpose e-Codex is generating ETSI-Rem evidences if messages have reached a specific point.

Usually within e-Codex the message is passed to an national system. Often this national systems have
similar transport state messages. This transport state messages are mapped into ETSI-REM evidences
and transported to the sending party. Back at the sending party this evidences can be ignored or
mapped back to the national evidences.

== Creating trust between different systems

E-Codex was build to connect different message transport systems. Within this transport systems there
are also different ways to ensure the trust/origin of the document. Some of this systems are using
an PKI approach were all generated documents are signed by the creator. Within other environments the
document hashes are stored in a central database. The validity is checked by the database. Within other
environments the necessary documents are not really created, they are just values and objects within
an application.

All these examples combine the problem that documents which are exported from this environments cannot
be validated within an other environment.

To solve this problem within e-Codex the idea of the trust token was created. The basic concept is before
any documents are sent to another domain the sending instance is creating an signed ASIC-S container.
This ASIC-S container also contains a token within this token the trust state of the sent document
for the current environment ist documented (as XML for automatic processing and as PDF for human readability).

After this steps the document is transported to the other domain. Before the document is importated in this
domain the receiving side is checking the ASIC-S container and the trust token. First of all the ASIC-S
container is validated. In any case the ASIC-S container has to be valid within the e-Codex environment.
After that the trust ok token is being checked. And its completly the decision of the receiving domain
if and how the document is imported into the receiving system.



//.Deployment Graphics
//image::ecodex_example_deployment.png[]

//== Components
//
//.Table Components
//|===
//| Name  | Description
//
//| Internet
//| Symbolizes the Internet, The connection between the Gateways is made through it
//
//
//| Firewall, DDOS-Filter
//| A Firewall which protects the internal network. The information distributed over the CMT can be used to reduce the range of IP-Addresses which can connect through this firewall to the Apache Web Server
//
//| Apache Web Server
//| The Apache Web Server in this Setup is responsible for terminating the TLS-Connection, Authenticating the connecting Web-Clients (the remote Gateway) by checking the client certificate
//
//| Tomcat Web Application Server - Domibus Gateway
//| The domibus Gateway is deployed on a Tomcat Web Application Server
//
//| Tomcat Web Application Server - Domibus Connector
//| The domibusConnector is deployed on a Tomcat Web Application Server
//
//| Tomcat Web Application Server - Connector Client Application
//| The Connector Client Application is deployed on a Tomcat Web Application Server. This can be a national solution of an eCodeX-UseCase or the ReferenceImplementation.
//
//| Database
//| The database (MYSQL) provides for each application a different database.
//|===
//
// **Note that each application is running on it's own tomcat application server in this example!**
//
//
//=== Firewall, DDOS-Filter
//
//The firewall acts in this setup as simple IP-Filtering mechanism and ensures that only the partners of the ecodex-Network
//can access the domibus gateway.
//
//
//=== Example Apache Setup and alternatives
//
//Possible alternatives for the apache in this use case can be:
//
// * NGINX
// * IIS
// * Apache
// * Tomcat (using tomcat for TLS-terminiation)
// * ...
//
//The most commonly used webserver is the apache webserver. http://httpd.apache.org/
//Apache is well doucmented and there are a lot of examples. Important for the setup is that
//the tls (at least TLS 1.2 better TLS 1.3) encryption is enabled on apache. For this purpose the
//apache server needs a certificate. You can obtain this certificate also over letsencrypt.
//
//As apache is the most used webserver over the whole internet the next paragraphs will cover the e-Codex
//specifics of an apache setup.
//
//==== Setting up Apache
//
//The apache webserver project site offers a good tutorial for setting up apache with TLS-encryption.
//https://httpd.apache.org/docs/2.4/en/ssl/ssl_howto.html
//
//After the apache setup is complete make sure that your webserver is reachable over https from
//the public internet. And also export the whole public certificate chain to the CMT to share
//your public key information with your e-Codex network partners. This is very important if you
//are using a not well trusted certificate authority or a self signed certificate.
//
//Your shared webserver certificate will become part of the trusted_webserver.jks keystore - and
//only certificates within this store are considered trusted in the specific e-Codex Environment.
//
//==== Activating TLS-client-authentication/2-way-SSL on apache
//
//Some e-Codex usecases may require also TLS-client authentication (aka 2-way-SSL). If the client authentication
//is used also the client is authenticated at the server on TLS level. For this purpose the client presents
//a client certificate to the webserver when opening the connection.
//
//For activating 2-way-ssl on apache the following example configuration can be used. For further details
//consult the apache manual!
//
//```
//<VirtualHost _default_:443>
//  SSLEngine on
//  ServerName localhost:443
//  SSLCertificateFile "${SRVROOT}/conf/ssl/server.crt"
//  SSLCertificateKeyFile "${SRVROOT}/conf/ssl/server.key"
//  # The following Parameter holds all trusted client certificates (2)
//  # (and thier parent certificates) in pem-format.
//  SSLCACertificateFile "${SRVROOT}/conf/ssl/trusted_clients.pem"
//  DocumentRoot "${SRVROOT}/htdocs"
//
//	CustomLog "${SRVROOT}/logs/ssl_request.log %t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"
//	<Directory "${SRVROOT}/htdocs">
//		Options Indexes Includes FollowSymLinks
//		AllowOverride AuthConfig Limit FileInfo
//        Require all granted
//	</Directory>
//
//  #always protect the whole v-host to avoid post-handshake authentication!
//  SSLVerifyClient Require
//  SSLVerifyDepth 2 # clientcert(0)->intermediateCA(1)->RootCA(2)
//
//  <Location "/domibus/services/msh" >
//    ProxyPass <gateway>/domibus/services/msh
//    ProxyPassReverse <gateway>/domibus/services/msh
//  </Location>
//
//</virtualhost>
//```
//
//SSLVerifyDepth https://httpd.apache.org/docs/2.4/en/mod/mod_ssl.html#sslverifydepth
//
//NOTE: Put the SSLVerifyClient Require directive into the vhost directive to avoid SSL renegotiation. Though apache
//supports the SSLVerifyClient also within a Location directive but this would force the client to renegotiate the
//TLS connection. This can lead to connection errors at the as webclient acting domibus gateway.
//
//==== Additional Notes on Webserver Setup
//
// * Ensure TLS 1.3 is activated and downgrading is not allowed!
// * Ensure that if the usecase requires it TLS-client authentication is activated
//
//
//=== AS4 Gateway / Domibus Gateway
//
//Most of the e-Codex installations are using the domibus gateway for fullfilling the AS4 interface. But there
//are also known installations which are using IBM axway.
//
//The eDelivery site of CEF lists some more alternatives:
//https://ec.europa.eu/cefdigital/wiki/display/CEFDIGITAL/eDelivery+AS4+conformant+solutions
//
//Keep in mind that if you are using some of the alternatives you still have to fullfill the e-Codex protocol demands.
//(TODO: link to technical differences ecodex - eDelivery)
//
//==== Example Setup
//
//For installing the domibus gateway the website provides a very good guide.
//https://ec.europa.eu/cefdigital/wiki/display/CEFDIGITAL/Domibus
//
//
//
//==== TLS-client-authentication/2-way-SSL authentication
//
//
//For clientauthentication the information is located under:
//
//<domibus_tomcat>/conf/domibus/clientauthentication.xml
//
//```$xml
//
//<http-conf:tlsClientParameters disableCNCheck="true" secureSocketProtocol="TLSv1.2"
//  xmlns:http-conf="http://cxf.apache.org/transports/http/configuration"
//  xmlns:security="http://cxf.apache.org/configuration/security">
//
//  <security:trustManagers>
//    <!-- the following line contains the store which holds all trusted
//    webserver certificates (file (b)) and thier parent certificates -->
//    <security:keyStore type="JKS"
//        password="changeit"
//        file="${domibus.config.location}/keystores/trusted_https_servers.jks"
//    />
//  </security:trustManagers>
//  <security:keyManagers keyPassword="12345">
//  <!-- this key store contains the web client private key,
//  the public certificate is distributed with
//  the trusted_https_clients store  -->
//    <security:keyStore
//        type="JKS"
//        password="12345"
//        file="${domibus.config.location}/keystores/https_client_keystore.jks"
//    />
//  </security:keyManagers>
//</http-conf:tlsClientParameters>
//
//```
//
//The same file is also used to list the trusted webservers the domibus gateway is connecting to. The
//certifcates (and thier intermediate and RootCAs) of the trusted webservers are listed within
//the trusted_https_servers.jks truststore.
//
//To activate clientauthentication the gateway must present the webserver a key. This key is
//stored in the https_client_keystore.jks. This key is private! The corresponding certificate is
//distributed within the trusted_webclients.pem file and used at the webserver to allow the connection.
//
//=== Setting up Connector
//
//The additional features of the e-Codex protocol like
//
// * evidence handling
// * ASIC-S container building
// * TrustOK Token generatation
//
//are provided by the domibusConnector. The domibus connector comes with an installation manual.
//
//(TODO: set link to connector manual!)
//
//

